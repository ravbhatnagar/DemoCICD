{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"hostingPlanName": {
			"type": "string",
			"minLength": 1
		},
		"skuName": {
			"type": "string",
			"defaultValue": "F1",
			"allowedValues": [
				"F1",
				"D1",
				"B1",
				"B2",
				"B3",
				"S1",
				"S2",
				"S3",
				"P1",
				"P2",
				"P3",
				"P4"
			],
			"metadata": {
				"description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
			}
		},
		"skuCapacity": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 1,
			"metadata": {
				"description": "Describes plan's instance count"
			}
		},
		"_artifactsLocation": {
			"type": "string"
		},
		"_artifactsLocationSasToken": {
			"type": "securestring"
		},
		"vmLocation": {
			"type": "string",
			"allowedValues": [
				"West US",
				"East US",
				"West Europe",
				"East Asia",
				"Southeast Asia"
			],
			"metadata": {
				"description": "This is the location of the Virtual Machine"
			}
		},
		"newStorageAccountName": {
			"type": "string",
			"metadata": {
				"description": "This is the name of the storage account for storing Virtual Machine disk"
			}
		},
		"vmName": {
			"type": "string",
			"metadata": {
				"description": "This is the name of the Virtual Machine"
			}
		},
		"vmSize": {
			"type": "string",
			"defaultValue": "Standard_A0",
			"metadata": {
				"description": "This is the size of the Virtual Machine"
			}
		},
		"imagePublisher": {
			"type": "string",
			"defaultValue": "MicrosoftWindowsServer",
			"metadata": {
				"description": "Image Publisher"
			}
		},
		"imageOffer": {
			"type": "string",
			"defaultValue": "WindowsServer",
			"metadata": {
				"description": "Image Offer"
			}
		},
		"imageSKU": {
			"type": "string",
			"defaultValue": "2012-R2-Datacenter",
			"metadata": {
				"description": "Image SKU"
			}
		},
		"adminUserName": {
			"type": "string",
			"metadata": {
				"description": "This is the Virtual Machine administrator login name"
			}
		},
		"adminPassword": {
			"type": "securestring",
			"metadata": {
				"description": "This is the Virtual Machine administrator login password"
			}
		},
		"dnsName": {
			"type": "string",
			"metadata": {
				"description": "This is the DNS name of the Virtual Machine"
			}
		},
		"DatabaseServerName": {
			"type": "string",
			"metadata": {
				"description": "This is database server name"
			}
		},
		"DatabaseServerLocation": {
			"type": "string",
			"metadata": {
				"description": "This is database server location"
			}
		},
		"databaseServerAdminLogin": {
			"type": "string",
			"metadata": {
				"description": "This is database server administrator login name"
			}
		},
		"databaseServerAdminLoginPassword": {
			"type": "securestring",
			"metadata": {
				"description": "This is database server administrator login password"
			}
		},
		"databaseName": {
			"type": "string",
			"metadata": {
				"description": "This is name of the database hosted in the database server"
			}
		},
		"databaseCollation": {
			"type": "string",
			"defaultValue": "SQL_Latin1_General_CP1_CI_AS",
			"metadata": {
				"description": "This is database collation - rule for comparing the encodings in the database"
			}
		},
		"databaseEdition": {
			"type": "string",
			"defaultValue": "Web",
			"allowedValues": [
				"Basic",
				"Business",
				"Premium",
				"Standard",
				"Web"
			],
			"metadata": {
				"description": "This is database edition"
			}
		},
		"modulesUrl": {
			"type": "string",
			"metadata": {
				"description": "This is the URL for downloading the PowerShell DSC module. In this case it should be the link to a zip file hosted under an Azure storage container"
			}
		}
	},
	"variables": {
		"webSiteName": "[concat('webSite', uniqueString(resourceGroup().id))]",
		"virtualNetworkName": "[concat(parameters('vmName'), '-VNET')]",
		"vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
		"OSDiskName": "osdiskforwindowssimple",
		"vmStorageAccountContainerName": "vhds",
		"nicName": "[concat(parameters('vmName'),'-NIC')]",
		"addressPrefix": "10.0.0.0/16",
		"subnet1Name": "Subnet-1",
		"subnet2Name": "Subnet-2",
		"subnet1Prefix": "10.0.0.0/24",
		"subnet2Prefix": "10.0.1.0/24",
		"subnet1Ref": "[concat(variables('vnetID'),'/subnets/',variables('subnet1Name'))]",
		"publicIPAddressName": "[concat(parameters('vmName'), '-PublicIP-VM')]",
		"storageAccountType": "Standard_LRS"
	},
	"resources": [
		{
			"apiVersion": "2015-08-01",
			"name": "[parameters('hostingPlanName')]",
			"type": "Microsoft.Web/serverfarms",
			"location": "[resourceGroup().location]",
			"tags": {
				"displayName": "HostingPlan"
			},
			"sku": {
				"name": "[parameters('skuName')]",
				"capacity": "[parameters('skuCapacity')]"
			},
			"properties": {
				"name": "[parameters('hostingPlanName')]"
			}
		},
		{
			"apiVersion": "2015-08-01",
			"name": "[variables('webSiteName')]",
			"type": "Microsoft.Web/sites",
			"location": "[resourceGroup().location]",
			"tags": {
				"[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "Resource",
				"displayName": "Website"
			},
			"dependsOn": [
				"[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
			],
			"properties": {
				"name": "[variables('webSiteName')]",
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
			},
			"resources": [
				{
					"name": "MSDeploy",
					"type": "extensions",
					"location": "[resourceGroup().location]",
					"apiVersion": "2015-08-01",
					"dependsOn": [
						"[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
					],
					"tags": {
						"displayName": "WebDepExt"
					},
					"properties": {
						"packageUri": "[concat(parameters('_artifactsLocation'),  parameters('_artifactsLocationSasToken'))]",
						"dbType": "None",
						"connectionString": "",
						"setParameters": {
							"IIS Web Application Name": "[variables('webSiteName')]"
						}
					}
				}
			]
		},
		{
			"apiVersion": "2014-04-01",
			"name": "[concat(parameters('hostingPlanName'), '-', resourceGroup().name)]",
			"type": "Microsoft.Insights/autoscalesettings",
			"location": "East US",
			"tags": {
				"[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "Resource",
				"displayName": "AutoScaleSettings"
			},
			"dependsOn": [
				"[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
			],
			"properties": {
				"profiles": [
					{
						"name": "Default",
						"capacity": {
							"minimum": 1,
							"maximum": 2,
							"default": 1
						},
						"rules": [
							{
								"metricTrigger": {
									"metricName": "CpuPercentage",
									"metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
									"timeGrain": "PT1M",
									"statistic": "Average",
									"timeWindow": "PT10M",
									"timeAggregation": "Average",
									"operator": "GreaterThan",
									"threshold": 80.0
								},
								"scaleAction": {
									"direction": "Increase",
									"type": "ChangeCount",
									"value": 1,
									"cooldown": "PT10M"
								}
							},
							{
								"metricTrigger": {
									"metricName": "CpuPercentage",
									"metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
									"timeGrain": "PT1M",
									"statistic": "Average",
									"timeWindow": "PT1H",
									"timeAggregation": "Average",
									"operator": "LessThan",
									"threshold": 60.0
								},
								"scaleAction": {
									"direction": "Decrease",
									"type": "ChangeCount",
									"value": 1,
									"cooldown": "PT1H"
								}
							}
						]
					}
				],
				"enabled": false,
				"name": "[concat(parameters('hostingPlanName'), '-', resourceGroup().name)]",
				"targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
			}
		},
		{
			"apiVersion": "2014-04-01",
			"name": "[concat('ServerErrors ', variables('webSiteName'))]",
			"type": "Microsoft.Insights/alertrules",
			"location": "East US",
			"dependsOn": [
				"[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
			],
			"tags": {
				"[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
				"displayName": "ServerErrorsAlertRule"
			},
			"properties": {
				"name": "[concat('ServerErrors ', variables('webSiteName'))]",
				"description": "[concat(variables('webSiteName'), ' has some server errors, status code 5xx.')]",
				"isEnabled": false,
				"condition": {
					"odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
					"dataSource": {
						"odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
						"resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]",
						"metricName": "Http5xx"
					},
					"operator": "GreaterThan",
					"threshold": 0.0,
					"windowSize": "PT5M"
				},
				"action": {
					"odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
					"sendToServiceOwners": true,
					"customEmails": [ ]
				}
			}
		},
		{
			"apiVersion": "2014-04-01",
			"name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
			"type": "Microsoft.Insights/alertrules",
			"location": "East US",
			"dependsOn": [
				"[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
			],
			"tags": {
				"[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
				"displayName": "ForbiddenRequestsAlertRule"
			},
			"properties": {
				"name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
				"description": "[concat(variables('webSiteName'), ' has some requests that are forbidden, status code 403.')]",
				"isEnabled": false,
				"condition": {
					"odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
					"dataSource": {
						"odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
						"resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]",
						"metricName": "Http403"
					},
					"operator": "GreaterThan",
					"threshold": 0,
					"windowSize": "PT5M"
				},
				"action": {
					"odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
					"sendToServiceOwners": true,
					"customEmails": [ ]
				}
			}
		},
		{
			"apiVersion": "2014-04-01",
			"name": "[concat('CPUHigh ', parameters('hostingPlanName'))]",
			"type": "Microsoft.Insights/alertrules",
			"location": "East US",
			"dependsOn": [
				"[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
			],
			"tags": {
				"[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "Resource",
				"displayName": "CPUHighAlertRule"
			},
			"properties": {
				"name": "[concat('CPUHigh ', parameters('hostingPlanName'))]",
				"description": "[concat('The average CPU is high across all the instances of ', parameters('hostingPlanName'))]",
				"isEnabled": false,
				"condition": {
					"odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
					"dataSource": {
						"odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
						"resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
						"metricName": "CpuPercentage"
					},
					"operator": "GreaterThan",
					"threshold": 90,
					"windowSize": "PT15M"
				},
				"action": {
					"odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
					"sendToServiceOwners": true,
					"customEmails": [ ]
				}
			}
		},
		{
			"apiVersion": "2014-04-01",
			"name": "[concat('LongHttpQueue ', parameters('hostingPlanName'))]",
			"type": "Microsoft.Insights/alertrules",
			"location": "East US",
			"dependsOn": [
				"[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
			],
			"tags": {
				"[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "Resource",
				"displayName": "LongHttpQueueAlertRule"
			},
			"properties": {
				"name": "[concat('LongHttpQueue ', parameters('hostingPlanName'))]",
				"description": "[concat('The HTTP queue for the instances of ', parameters('hostingPlanName'), ' has a large number of pending requests.')]",
				"isEnabled": false,
				"condition": {
					"odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
					"dataSource": {
						"odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
						"resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
						"metricName": "HttpQueueLength"
					},
					"operator": "GreaterThan",
					"threshold": 100.0,
					"windowSize": "PT5M"
				},
				"action": {
					"odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
					"sendToServiceOwners": true,
					"customEmails": [ ]
				}
			}
		},
		{
			"apiVersion": "2014-04-01",
			"name": "[variables('webSiteName')]",
			"type": "Microsoft.Insights/components",
			"location": "Central US",
			"dependsOn": [
				"[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
			],
			"tags": {
				"[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
				"displayName": "AppInsightsComponent"
			},
			"properties": {
				"applicationId": "[variables('webSiteName')]"
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[parameters('newStorageAccountName')]",
			"apiVersion": "2015-05-01-preview",
			"location": "[parameters('vmLocation')]",
			"tags": {
				"displayName": "StorageAccount"
			},
			"properties": {
				"accountType": "[variables('storageAccountType')]"
			}
		},
		{
			"apiVersion": "2015-05-01-preview",
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('publicIPAddressName')]",
			"location": "[parameters('vmLocation')]",
			"tags": {
				"displayName": "PublicIPAddress"
			},
			"properties": {
				"publicIPAllocationMethod": "Dynamic",
				"dnsSettings": {
					"domainNameLabel": "[parameters('dnsName')]"
				}
			}
		},
		{
			"apiVersion": "2015-05-01-preview",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('vmLocation')]",
			"tags": {
				"displayName": "VirtualNetwork"
			},
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('subnet1Name')]",
						"properties": {
							"addressPrefix": "[variables('subnet1Prefix')]"
						}
					},
					{
						"name": "[variables('subnet2Name')]",
						"properties": {
							"addressPrefix": "[variables('subnet2Prefix')]"
						}
					}
				]
			}
		},
		{
			"apiVersion": "2015-05-01-preview",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[variables('nicName')]",
			"location": "[parameters('vmLocation')]",
			"tags": {
				"displayName": "NetworkInterface"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
							},
							"subnet": {
								"id": "[variables('subnet1Ref')]"
							}
						}
					}
				]
			}
		},
		{
			"apiVersion": "2015-05-01-preview",
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[parameters('vmName')]",
			"location": "[parameters('vmLocation')]",
			"tags": {
				"displayName": "VirtualMachine"
			},
			"dependsOn": [
				"[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computername": "[parameters('vmName')]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[parameters('imagePublisher')]",
						"offer": "[parameters('imageOffer')]",
						"sku": "[parameters('imageSKU')]",
						"version": "latest"
					},
					"osDisk": {
						"name": "osdisk",
						"vhd": {
							"uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/vhds/','osdisk.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
						}
					]
				}
			},
			"resources": [
				{
					"name": "DSCExt1",
					"type": "extensions",
					"location": "[parameters('vmLocation')]",
					"apiVersion": "2015-05-01-preview",
					"dependsOn": [
						"[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
					],
					"tags": {
						"displayName": "DSCExt1"
					},
					"properties": {
						"publisher": "Microsoft.Powershell",
						"type": "DSC",
						"typeHandlerVersion": "2.8",
						"settings": {
							"modulesUrl": "[parameters('modulesUrl')]",
							"configurationFunction": "ConfigureWebServer.ps1\\Main",
							"properties": {
								"MachineName": "[parameters('vmName')]",
								"WebDeployPackagePath": "[concat(parameters('_artifactsLocation'), parameters('_artifactsLocationSasToken'))]",
								"UserName": "[parameters('adminUserName')]",
								"Password": "[parameters('adminPassword')]",
								"DbServerName": "[parameters('DatabaseServerName')]",
								"DbName": "[parameters('databaseName')]",
								"DbUserName": "[parameters('databaseServerAdminLogin')]",
								"DbPassword": "[parameters('databaseServerAdminLoginPassword')]"
							}
						},
						"protectedSettings": { }
					}
				}
			]
		},
		{
			"name": "[parameters('DatabaseServerName')]",
			"type": "Microsoft.Sql/servers",
			"location": "[parameters('DatabaseServerLocation')]",
			"apiVersion": "2014-04-01-preview",
			"dependsOn": [ ],
			"tags": {
				"displayName": "[parameters('DatabaseServerName')]"
			},
			"properties": {
				"administratorLogin": "[parameters('databaseServerAdminLogin')]",
				"administratorLoginPassword": "[parameters('databaseServerAdminLoginPassword')]"
			},
			"resources": [
				{
					"name": "AllowAllWindowsAzureIps",
					"type": "firewallrules",
					"location": "[parameters('DatabaseServerLocation')]",
					"apiVersion": "2014-04-01-preview",
					"dependsOn": [
						"[concat('Microsoft.Sql/servers/', parameters('DatabaseServerName'))]"
					],
					"properties": {
						"startIpAddress": "0.0.0.0",
						"endIpAddress": "0.0.0.0"
					}
				},
				{
					"name": "[parameters('databaseName')]",
					"type": "databases",
					"location": "[parameters('DatabaseServerLocation')]",
					"apiVersion": "2014-04-01-preview",
					"dependsOn": [
						"[parameters('DatabaseServerName')]"
					],
					"tags": {
						"displayName": "cawadb1"
					},
					"properties": {
						"collation": "[parameters('databaseCollation')]",
						"edition": "[parameters('databaseEdition')]",
						"maxSizeBytes": "1073741824"
					}
				}
			]
		}
	]
}
